from aiogram import Router, Bot, types
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, WebAppInfo, InlineKeyboardButton
from aiogram.filters import Command

from config.settings import config, logger
from keyboards.inline import main_menu_keyboard, catalog_keyboard
from utils.commands import set_bot_commands, set_channel_commands
from utils.smt_texts import welcome_text

router = Router()


@router.message(CommandStart())
async def start_cmd(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    await message.answer(
        text=welcome_text,
        reply_markup=main_menu_keyboard(),
        parse_mode="HTML"
    )


@router.message(Command("shares"))
async def menu_command(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /shares"""
    channel_link = "https://t.me/BarBags_shop/415"
    head_link = "https://t.me/BarBags_shop"
    await message.answer(
        text=(
            f"<b>üî• –ê–ö–¶–Ü–á –¢–ê –ó–ù–ò–ñ–ö–ò üî•</b>\n\n"
            f"‚ú® <b>–ù–µ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å –≤–∏–≥—ñ–¥–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó!</b> ‚ú®\n\n"
            f"üì± –ü—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à <a href='{head_link}'> –∫–∞–Ω–∞–ª</a>, —â–æ–± –º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ:\n"
            f"   ‚Ä¢ –°–µ–∑–æ–Ω–Ω–∏—Ö —Ä–æ–∑–ø—Ä–æ–¥–∞–∂—ñ–≤\n"
            f"   ‚Ä¢ –ï–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏—Ö –∑–Ω–∏–∂–æ–∫\n"
            f"   ‚Ä¢ –û–±–º–µ–∂–µ–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π\n\n"
            f"üéÅ <a href='{channel_link}'>–ü–ï–†–ï–ì–õ–Ø–ù–£–¢–ò –ü–û–¢–û–ß–ù–Ü –ê–ö–¶–Ü–á</a> üéÅ"
        ),
        parse_mode="HTML",
        disable_web_page_preview=False
    )


@router.message(Command("feedback"))
async def feedbacks_command(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /feedback"""
    site_link = "https://barbags.com.ua/ua/testimonials"
    photo_review_link = "https://res.cloudinary.com/dqxmd2u3s/image/upload/v1740563044/Designer_sb5wqw.jpg"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìù –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—ñ–¥–≥—É–∫–∏",
                    web_app=WebAppInfo(url=site_link)
                )
            ]
        ]
    )
    await message.answer_photo(
        photo=photo_review_link,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.message(Command("catalog"))
async def catalog_command(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /catalog"""
    await message.answer(
        text="–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:\nüëá",
        reply_markup=catalog_keyboard()
    )


@router.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /help"""
    help_text = """
    ‚ú® <b>–ü–û–ú–Ü–ß–ù–ò–ö BARBAGS</b> ‚ú®

    üì± <b>–ö–û–ú–ê–ù–î–ò –î–õ–Ø –®–í–ò–î–ö–û–ì–û –î–û–°–¢–£–ü–£:</b>

    üè† /start - –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –±–æ—Ç–∞
    üéÅ /shares - –ì–∞—Ä—è—á—ñ –∞–∫—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏
    ‚≠êÔ∏è /feedback - –í—ñ–¥–≥—É–∫–∏ –Ω–∞—à–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
    üõçÔ∏è /catalog - –ü–µ—Ä–µ–≥–ª—è–¥ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–æ–≤–∞—Ä—ñ–≤
    ‚ÑπÔ∏è /help - –¶—è –¥–æ–≤—ñ–¥–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è

    ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

    üí¨ <b>–ü–û–¢–†–Ü–ë–ù–ê –î–û–ü–û–ú–û–ì–ê?</b>
    –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    üë©‚Äçüíº @barska_olena

    üåü <b>BarBags</b> - —è–∫—ñ—Å—Ç—å, —è–∫—É –º–æ–∂–Ω–∞ –≤—ñ–¥—á—É—Ç–∏!
    """
    await message.answer(text=help_text, parse_mode="HTML")


async def pin_webapp_menu():
    """–ó–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–µ–±-–¥–æ–¥–∞—Ç–∫–æ–º —É –∫–∞–Ω–∞–ª—ñ"""
    async with Bot(token=config.BOT_TOKEN) as bot:
        for channel_id in config.CHANNEL_IDS:
            try:
                logger.info(f"–°–ø—Ä–æ–±–∞ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ {channel_id}")
                msg = await bot.send_message(
                    chat_id=channel_id,
                    text=(
                        "<b>üõç –Ø–∫ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?</b>\n\n"
                        "1Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä —É –Ω–∞—à–æ–º—É –∫–∞—Ç–∞–ª–æ–∑—ñ.\n\n"
                        "2Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å <a href='https://t.me/barska_olena'>¬´–ù–∞–ø–∏—Å–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É¬ª</a> –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó.\n\n"
                        "3Ô∏è‚É£ –£–∑–≥–æ–¥—å—Ç–µ –¥–µ—Ç–∞–ª—ñ —Ç–∞ –æ–ø–ª–∞—Ç—É.\n\n"
                        "4Ô∏è‚É£ –û—á—ñ–∫—É–π—Ç–µ —à–≤–∏–¥–∫—É –¥–æ—Å—Ç–∞–≤–∫—É! üöÄ\n\n"
                        "üì¢ <b>–ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:</b>\n\n"
                        "üîπ <a href='https://t.me/barbags_bot'>üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</a>\n\n"
                        "üîπ <a href='https://t.me/share/url?url=https://t.me/barbags_bot&text=üëú –ú–∞–≥–∞–∑–∏–Ω BarBags: —Å—Ç–∏–ª—å–Ω—ñ —Å—É–º–∫–∏ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏!'>üì§ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è</a>\n"
                    ),
                    parse_mode="HTML",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                types.InlineKeyboardButton(
                                    text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É",
                                    url="https://t.me/barska_olena"
                                )
                            ]
                        ]
                    )
                )

                await bot.pin_chat_message(chat_id=channel_id, message_id=msg.message_id)
                logger.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–µ –≤ –∫–∞–Ω–∞–ª—ñ {channel_id}")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–∫—Ä—ñ–ø–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ {channel_id}. –ü–æ–º–∏–ª–∫–∞: {str(e)}")


async def on_startup():
    """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –±–æ—Ç–∞"""
    logger.info("üìå –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
    await pin_webapp_menu()

    bot = Bot(token=config.BOT_TOKEN)
    await set_bot_commands(bot)

    for channel_id in config.CHANNEL_IDS:
        await set_channel_commands(bot, channel_id)
    await bot.session.close()
